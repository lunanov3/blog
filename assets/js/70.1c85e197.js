(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{373:function(t,n,a){"use strict";a.r(n);var e=a(0),o=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"java注解获取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java注解获取"}},[t._v("#")]),t._v(" Java注解获取")]),t._v(" "),a("p",[t._v("java.lang.reflect.AnnotatedElement 接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：")]),t._v(" "),a("ul",[a("li",[t._v("方法："),a("T",{attrs:{extends:"",Annotation:""}},[t._v(" T getAnnotation(Class"),a("T",[t._v(" annotationClass): 返回改程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。")])],1)],1),t._v(" "),a("li",[t._v("方法：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。")]),t._v(" "),a("li",[t._v("方法：boolean is AnnotationPresent(Class<?extends Annotation> annotationClass):判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false.")]),t._v(" "),a("li",[t._v("方法：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法不同，该方法将忽略继承的注释。（如果没有注释直接存在于此元素上，则返回长度为零的一个数组。）该方法的调用者可以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响")])])])}),[],!1,null,null,null);n.default=o.exports}}]);